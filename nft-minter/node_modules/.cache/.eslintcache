[{"/home/avo/PANDO/pando-finance/nft-minter/src/index.js":"1","/home/avo/PANDO/pando-finance/nft-minter/src/App.js":"2","/home/avo/PANDO/pando-finance/nft-minter/src/reportWebVitals.js":"3","/home/avo/PANDO/pando-finance/nft-minter/src/Minter.js":"4","/home/avo/PANDO/pando-finance/nft-minter/src/util/interact.js":"5","/home/avo/PANDO/pando-finance/nft-minter/src/util/pinata.js":"6"},{"size":500,"mtime":1653616594872,"results":"7","hashOfConfig":"8"},{"size":175,"mtime":1653616594872,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1653616594872,"results":"10","hashOfConfig":"8"},{"size":3034,"mtime":1653616594872,"results":"11","hashOfConfig":"8"},{"size":3841,"mtime":1653623756126,"results":"12","hashOfConfig":"8"},{"size":852,"mtime":1653616594872,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1omr7qa",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":2,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/avo/PANDO/pando-finance/nft-minter/src/index.js",[],"/home/avo/PANDO/pando-finance/nft-minter/src/App.js",[],"/home/avo/PANDO/pando-finance/nft-minter/src/reportWebVitals.js",[],"/home/avo/PANDO/pando-finance/nft-minter/src/Minter.js",["27","28"],"/home/avo/PANDO/pando-finance/nft-minter/src/util/interact.js",["29","30","31","32","33","34","35","36"],"import { pinJSONToIPFS } from \"./pinata.js\";\nimport axios from \"axios\";\n\nrequire(\"dotenv\").config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst contractABI = require(\"../contract-abi.json\");\n//const contractAddress = \"0x219Ef99200D754c6B069a0e2F0883091023dF986\";\n\nconst contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nasync function loadContract() {\n  return new web3.eth.Contract(contractABI, contractAddress);\n}\n\nexport const mintNFT = async (url, name, description) => {\n  if (url.trim() == \"\" || name.trim() == \"\" || description.trim() == \"\") {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\",\n    };\n  }\n\n  //make metadata\n  const metadata = new Object();\n  metadata.name = name;\n  metadata.image = url;\n  metadata.description = description;\n\n  const pinataResponse = await pinJSONToIPFS(metadata);\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"😢 Something went wrong while uploading your tokenURI.\",\n    };\n  }\n  const tokenURI = pinataResponse.pinataUrl;\n\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    data: window.contract.methods\n      .mintNFT(window.ethereum.selectedAddress, tokenURI)\n      .encodeABI(),\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status:\n        \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" +\n        txHash,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message,\n    };\n  }\n};\n","/home/avo/PANDO/pando-finance/nft-minter/src/util/pinata.js",[],{"ruleId":"37","severity":1,"message":"38","line":16,"column":13,"nodeType":"39","endLine":23,"endColumn":4},{"ruleId":"40","severity":1,"message":"41","line":41,"column":11,"nodeType":"42","messageId":"43","endLine":41,"endColumn":73,"fix":"44"},{"ruleId":"45","severity":1,"message":"46","line":2,"column":8,"nodeType":"47","messageId":"48","endLine":2,"endColumn":13},{"ruleId":"40","severity":1,"message":"41","line":38,"column":13,"nodeType":"42","messageId":"43","endLine":38,"endColumn":75,"fix":"49"},{"ruleId":"40","severity":1,"message":"41","line":80,"column":13,"nodeType":"42","messageId":"43","endLine":80,"endColumn":75,"fix":"50"},{"ruleId":"45","severity":1,"message":"51","line":91,"column":16,"nodeType":"47","messageId":"48","endLine":91,"endColumn":28},{"ruleId":"52","severity":1,"message":"53","line":96,"column":18,"nodeType":"54","messageId":"55","endLine":96,"endColumn":20},{"ruleId":"52","severity":1,"message":"53","line":96,"column":39,"nodeType":"54","messageId":"55","endLine":96,"endColumn":41},{"ruleId":"52","severity":1,"message":"53","line":96,"column":67,"nodeType":"54","messageId":"55","endLine":96,"endColumn":69},{"ruleId":"56","severity":1,"message":"57","line":104,"column":20,"nodeType":"58","messageId":"59","endLine":104,"endColumn":32},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"60","text":"61"},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar",{"range":"62","text":"61"},{"range":"63","text":"61"},"'loadContract' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral",[1119,1119]," rel=\"noreferrer\"",[1096,1096],[2081,2081]]